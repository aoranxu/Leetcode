Dynnamic Programming
1. The traditional way is building a n * n matrix,
dp[i][j] represents the longest length between 
s[i:j + 1], the space complexity is O(n^2)
2. The optimized way whose time complexity is O(n),
we build a one-dimensinal dp array, dp[i] represents
the longest length from i to the end of array at this moment.

class Solution(object):
    def longestPalindromeSubseq(self, s):
        """
        :type s: str
        :rtype: int
        """
        if s == s[::-1]:
            return len(s)
        n = len(s)
        dp = [1] * n
        pre = 0
        for i in xrange(1, n):
            pre = 0
            for j in reversed(range(i)):
                tmp = dp[j]
                if s[j] == s[i]:
                    dp[j] = pre + 2
                else:
                    dp[j] = max(dp[j + 1], dp[j])
                pre = tmp
        return dp[0]
