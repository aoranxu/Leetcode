Creating a 2D array dp.
dp[i][j] refers to the number of palindromic subsequences in the S[i:j + 1]

class Solution(object):
    def countPalindromicSubsequences(self, s):
        """
        :type S: str
        :rtype: int
        """
        MODULE = 10 ** 9 + 7
        n = len(s)
        if n <= 1:
            return n
        
        dp = [[0] * n for i in xrange(n)]
        
        for i in xrange(n):
            dp[i][i] = 1
        
        for d in xrange(1, n):
            for i in xrange(n - d):
                if s[i] != s[i + d]:
                    dp[i][i + d] = dp[i][i + d - 1] + dp[i + 1][i + d] - dp[i + 1][i + d - 1]
                else:
                    left = i + 1
                    right = i + d - 1                    
                    while s[left] != s[i]:
                        left += 1
                    while s[right] != s[i]:
                        right -= 1
                        
                    if left > right:
                        dp[i][i + d] = 2 * dp[i + 1][i + d - 1] + 2
                    elif left == right:
                        dp[i][i + d] = 2 * dp[i + 1][i + d - 1] + 1
                    elif left < right:
                        dp[i][i + d] = 2 * dp[i + 1][i + d - 1] - dp[left + 1][right - 1]
                if dp[i][i + d] < 0:
                    dp[i][i + d] += MODULE
                else:
                    dp[i][i + d] %= MODULE
            
        return dp[0][n - 1]
