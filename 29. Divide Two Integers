The time complexity should be O((lgn)^2)

T(n) = T(n / 2) + lg n
= T(n / 4) + lg (n / 2) + lg n
= T(n / 8) + lg (n / 4) + lg (n / 2) + lg n
...
= lg n + lg (n / 2) + lg (n / 4) + ... + lg (n / 2lg n)
= lg n + (lg n - 1) + (lg n - 2) + (lg n - 3) + ... + (lg n - lg n)
= 0 + 1 + 2 + 3 + ... + lg n
= (lgn)^2

class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        MIN = -2**31
        MAX = 2**31 - 1
        if dividend == 0:
            return 0
        if dividend > 0 and divisor > 0 or dividend < 0 and divisor < 0:
            sign = 1
        else:
            sign = -1
        
        a, b = abs(dividend), abs(divisor)
        ans = self.helper(a, b) * sign
        if ans >= 0:
            return min(ans, MAX)
        else:
            return max(ans, MIN)
    
    def helper(self, a, b):
        if a < b:
            return 0
        if a == b:
            return 1
        ans = 1
        x = b
        while a >= x + x:
            ans += ans
            x += x
        return ans + self.helper(a - x, b)

            
