Use quickSelect to solve this problem.
Average time complexity O(n):
T(n) = n + T(n/2) = n + n/2 + n/4 + ... + 1 = O(n).
In the worst case, the time complexity is O(n^2).

class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        if k > len(nums):
            return 
        
        return self.quickSelect(nums, 0, len(nums) - 1, k)

    def quickSelect(self, nums, start, end, k):
        if start == end:
            return nums[start]
        left, right = start, end
        pivot = nums[(start + end) / 2]
        while left <= right:
            while left <= right and nums[left] > pivot:
                left += 1
            while left <= right and nums[right] < pivot:
                right -= 1
            if left <= right:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
        if right - start + 1 >= k:
            return self.quickSelect(nums, start, right, k)
        if left - start + 1 <= k:
            return self.quickSelect(nums, left, end, k - left + start)
        return nums[right + 1]
            
        
