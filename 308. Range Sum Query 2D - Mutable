Time complexity of update and sumRegion should be O(lgm*lgn).

class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        self.m, self.n = len(matrix), len(matrix[0]) if matrix else 0
        self.matrix = [[0] * self.n for i in xrange(self.m)]
        self.presum = [[0] * (self.n + 1) for i in xrange(self.m + 1)]
        for i in xrange(self.m):
            for j in xrange(self.n):
                self.update(i, j, matrix[i][j])

    def update(self, row, col, val):
        """
        :type row: int
        :type col: int
        :type val: int
        :rtype: void
        """
        diff = val - self.matrix[row][col]
        self.matrix[row][col] = val

        i = row + 1
        while i <= self.m:
            j = col + 1
            while j <= self.n:   
                self.presum[i][j] += diff
                j += (j & -j)
            i += (i & -i)
     
    def sumCorner(self, row, col):
        res = 0
        i = row + 1
        while i > 0:
            j = col + 1
            while j > 0:
                res += self.presum[i][j]
                j -= (j & -j)
            i -= (i & -i)
        return res
        

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        return self.sumCorner(row2, col2) - self.sumCorner(row1 - 1, col2) - self.sumCorner(row2, col1 - 1) + self.sumCorner(row1 - 1, col1 - 1)
