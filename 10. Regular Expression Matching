Generally speaking, the type of string match problem, 
we could use dynamic programming. We create a m * n 2-dimensional array here,
dp[i][j] represents the match result of substring s[:i+1] and p[:j+1].
The time complextiy is O(m*n), space complexity is also O(m*n).

class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        m, n = len(s), len(p)
        if n == 0:
            return m == 0
        dp = [[False] * (n + 1) for i in xrange(m + 1)]
        dp[0][0] = True

        for i in xrange(1, n + 1):
            # print i, p[i - 1]
            if p[i - 1] == "*":
                dp[0][i] = dp[0][i - 2]
        
        # print dp
        for i in xrange(1, m + 1):
            for j in xrange(1, n + 1):
                if s[i - 1] == p[j - 1] or p[j - 1] == ".":
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == "*":
                    dp[i][j] = dp[i][j - 2]
                    if s[i - 1] == p[j - 2] or p[j - 2] == ".":
                        dp[i][j] |= dp[i - 1][j]
        return dp[-1][-1]
