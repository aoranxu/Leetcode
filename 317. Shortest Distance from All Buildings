We should always start form every '1' to calculate the distance between
this building and other '0's. 

The time complexity should be:
"The time complexity for BFS/DFS is O(|V|+|E|),
not O(|V||E|). In this problem, every vertex has up to 4 edges (left, right, up, down), 
so |E| ~ 4|V|. Thus, you have overall O(|V|) = O(mn) for a BFS. 
This has been proven for all sparse graphs like this problem. 
Now, we do a BFS for each building, so the overall complexity is O(#buildings*(mn)). 
In worst case, every vertex is a building. 
So the number of buildings is also upper bounded by O(mn), 
and thus you have O((mn)(mn)) = O(m^2n^2). 
This is a very loose bound since when every vertex is a building, 
we don't even need to do a BFS (nowhere to go)."

The space complexity should be O(m^2n^2).

from collections import deque
class Solution(object):
    def shortestDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0
        m, n = len(grid), len(grid[0])
        reach = [[0] * n for i in xrange(m)]
        dist = [[0] * n for i in xrange(m)]
        total_buildings = 0
        for i in xrange(m):
            for j in xrange(n):
                if grid[i][j] == 1:
                    total_buildings += 1
   
        def bfs(x, y):
            count = 1
            q = deque([[x, y, 0]])
            visited = [[False] * n for i in xrange(m)]
            visited[x][y] = True
            while q:
                x, y, d = q.popleft()
                for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    nx = x + dx
                    ny = y + dy
                    if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                        if grid[nx][ny] == 1:
                            count += 1
                        elif grid[nx][ny] == 0:
                            reach[nx][ny] += 1
                            dist[nx][ny] += d + 1
                            q.append([nx, ny, d + 1])
                        visited[nx][ny] = True
            return count == total_buildings
        
        for i in xrange(m):
            for j in xrange(n):
                if grid[i][j] == 1:
                    if not bfs(i, j):
                        return -1
        
        ans = sys.maxint
        for i in xrange(m):
            for j in xrange(n):
                if reach[i][j] == total_buildings:
                    ans = min(ans, dist[i][j])
        return ans if ans < sys.maxint else -1
