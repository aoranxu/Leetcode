The time complexity of addWord operation should be O(n), 
n is the length of word.

The time complexity of search in worst case it should be
O(26^n), suppose every tree node has 26 children, and all 
characters in the word are ".".

The worst space consumption should be O(kn), k is the number of words
which are added into the trie, n is the average length of a word.

class TrieNode():
    def __init__(self):
        self.children = {}
        self.is_word = False
        
class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]
        node.is_word = True

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        node = self.root
        return self.helper(0, node, word)
    
    def helper(self, pos, node, word):
        if pos == len(word) - 1:
            if word[pos] in node.children:
                return node.children[word[pos]].is_word
            if word[pos] == ".":
                for k in node.children:
                    if node.children[k].is_word:
                        return True
            return False
        if word[pos] in node.children:
            return self.helper(pos + 1, node.children[word[pos]], word)
        if word[pos] == ".":
            for k in node.children:
                if self.helper(pos + 1, node.children[k], word):
                    return True
        return False
            

            
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
