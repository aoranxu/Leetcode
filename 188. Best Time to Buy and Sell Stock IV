The time complexity is O(nk), the space complexity is O(nk) as well.
Another point we should take care is that if k > n/2, then we can solve problem
in O(n) time, because we can include any transaction if it can make profits.

We can alsp try to use Finite State Machine to solve this problem.

class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        if len(prices) <= 1:
            return 0
        
        n = len(prices)
        if k >= n / 2:
            ans = 0
            for i in xrange(1, n):
                ans += prices[i] - prices[i - 1] if prices[i] > prices[i - 1] else 0
            return ans
        dp = [[0] * n for i in xrange(k + 1)]
        minp = prices[0]     
        for i in xrange(1, k + 1):
            for j in xrange(1, n):
                minp = min(minp, prices[j] - dp[i - 1][j - 1])
                dp[i][j] = max(dp[i][j - 1], prices[j] - minp)
            minp = prices[0]
        return dp[-1][-1]
